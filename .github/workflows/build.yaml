on:
  pull_request:
    branches:
      - master
  push:    
    branches:
      - master

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   node_version: 10, architecture: 'x64', pltf: 'mac',   in_ext: 'dmg', installer: 'electron-installer-dmg@latest'}
          - {os: windows-latest, node_version: 10, architecture: 'x64', pltf: 'win',   in_ext: 'msi', installer: 'electron-wix-msi@latest'}
          - {os: ubuntu-latest,  node_version: 10, architecture: 'x64', pltf: 'linux', in_ext: 'deb', installer: 'electron-installer-debian@latest'}
    env:
      PLTF: ${{ matrix.config.pltf }}
      INSTALL_PKG: ${{ matrix.config.installer }}

    name: Node ${{ matrix.config.node_version }} - ${{ matrix.config.architecture }} on ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Setup node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.config.node_version }}
          architecture: ${{ matrix.config.architecture }}
      - run: npm install --include=dev
      - run: cd frontend
      - run: npm install --include=dev
      - run: npm install -g @angular/cli@9.1.15
      - run: npm install -g typescript@3.8.3
      - run: cd ..
      - run: npm install ${INSTALL_PKG}

      - name: Build
        if: runner.os != 'Windows'
        run: npm run build-${PLTF}
        shell: bash

      - name: Build for Windows
        if: runner.os == 'Windows'
        run: npm run build-frontend && npm run package-win && find dist/
        shell: bash

      - name: Create Code Signing Certificate
        if: runner.os == 'Windows'
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate\certificate.txt -Value '${{ secrets.CODE_SIGN_CERT }}'
          certutil -decode certificate\certificate.txt certificate\certificate.pfx

      - name: Code Sign (exe)
        if: runner.os == 'Windows'
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CODE_SIGN_PASS }}' /fd sha256 /tr http://ts.ssl.com /td sha256 dist\StoX-win32-x64\StoX.exe

      - name: Set path for candle and light
        if: runner.os == 'Windows'
        run: echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_PATH
        shell: bash

      - name: Add msbuild to PATH
        if: runner.os == 'Windows'
        uses: microsoft/setup-msbuild@v1.0.2

      - name: Create installer for Windows
        if: runner.os == 'Windows'
        run: |
          npm run installer-win
          #cp dist/installers/*.msi installers/StoXInstaller/res/
          #cd installers/StoXInstaller
          #MSBuild.exe -p:Configuration=Release
          #cd ../..
        shell: bash

      - name: Code Sign (installers)
        if: runner.os == 'Windows'
        run: |
          & 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CODE_SIGN_PASS }}' /fd sha256 /tr http://ts.ssl.com /td sha256 dist\installers\StoX.msi
          #& 'C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe' sign /f certificate\certificate.pfx /p '${{ secrets.CODE_SIGN_PASS }}' /fd sha256 /tr http://ts.ssl.com /td sha256 installers\StoXInstaller\x64\Release\StoXInstaller.exe

      - name: Renaming files for upload
        env:
          EXT: ${{ matrix.config.in_ext }}
        run: |
          export VERSION=$(node -pe "require('./package.json')['version']")
          export LAST_VERSION=${VERSION##*.}
          export FINAL_TAG=${VERSION}$(if [ "$GITHUB_REF" = "refs/heads/develop" ]; then echo "+dev.${GITHUB_SHA::7}"; else echo ""; fi)
          export FULL_TAG=$(node -pe "require('./package.json')['name']")-installer-${PLTF}-${FINAL_TAG}
          mv $(ls dist/installers/*${EXT}) dist/installers/${FULL_TAG}.${EXT}
          echo "VERSION=${VERSION}" >> $GITHUB_ENV
          echo "LAST_VERSION=${LAST_VERSION}" >> $GITHUB_ENV
          echo "FINAL_TAG=${FINAL_TAG}" >> $GITHUB_ENV
          echo "FULL_TAG=${FULL_TAG}" >> $GITHUB_ENV
        shell: bash

      #- name: Renaming files for upload (Windows only)
      #  if: runner.os == 'Windows'
      #  env:
      #    FULL_TAG: ${{ env.FULL_TAG }}
      #  run: |
      #    mv installers/StoXInstaller/x64/Release/StoXInstaller.exe dist/installers/${FULL_TAG}.exe
      #  shell: bash

      - name: Build Redhat RPM package
        if: runner.os == 'Linux'
        run: |
          npm install -g electron-installer-redhat@latest
          electron-installer-redhat --src dist/StoX-linux-x64/ --dest dist/installers/ --arch x86_64
          mv $(ls dist/installers/*rpm) dist/installers/${FULL_TAG}.rpm
        shell: bash

      - run: find dist/installers
        shell: bash

      - uses: actions/upload-artifact@v2
        with:
          name: ${{ env.FULL_TAG  }}
          path: dist/installers/${{ env.FULL_TAG }}*

      - name: Put official release
        if: env.LAST_VERSION == '0' && github.event_name == 'push' && github.ref == 'refs/heads/master'
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.OFFICIAL_RELEASE_TOKEN }}
        with:
          source_file: dist/installers/${{ env.FULL_TAG }}*
          destination_repo: 'StoXProject/officialReleases'
          destination_folder: '.'
          user_email: '41898282+github-actions[bot]@users.noreply.github.com'
          user_name: 'github-actions'
          commit_message: 'New release file for StoX version ${{ env.VERSION }} : ${{ env.FULL_TAG }}'

      - name: Create release and upload files
        if: github.event_name == 'push' && ( github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' )
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: v${{ env.FINAL_TAG }}
          name: StoX-v${{ env.FINAL_TAG }}
          artifacts: dist/installers/${{ env.FULL_TAG }}*
          token: ${{ secrets.GITHUB_TOKEN }}
